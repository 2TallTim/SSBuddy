{

global vector $curvePoints[];
global string $cv = "";

proc SSB.readInputPoints(){
    //Reads points from curve widget and puts them into $curvePoints

    string $pointString = `falloffCurve -q -as $cv`;
    string $tkn[];
    tokenize ($pointString,",",$tkn);
    clear($curvePoints);
    for ($i=0; $i<size($tkn)/2; $i++) {
        $curvePoints[$i] = <<(float)$tkn[$i*2], (float)$tkn[$i*2+1], 0.0>>;
    }

}

proc vector SSB.deBoor(float $x, float $t[], vector $c[]){
    //Evaluates DeBoor's algorithm for B-spline curves

    $p = 3; //Degree
    $k = 0; //Knot span

    //Find knot span
    for($i = 0; $i < size($t)-1; $i++){
        if($t[$i]!=$t[$i+1] && $t[$i] <= $x && $t[$i+1] >= $x){
            $k = $i;
        }
    }

    vector $d[];
    for ($j=0; $j<$p+1; $j++) {
        $d[$j] = $c[$j+$k-$p];
    }
    for ($r = 1; $r < $p+1; $r++) {
        for($j = $p; $j>$r-1; $j--){
            $alpha = ($x - $t[$j+$k-$p]) / ($t[$j+1+$k-$r] - $t[$j+$k-$p]);
            $d[$j] = (1.0 - $alpha) * $d[$j-1] + $alpha * $d[$j];
        }
    }
    return $d[$p];

}

proc SSB.evalNurbs(){
    SSB.readInputPoints();
    vector $inputPoints[] = $curvePoints;
    float $knots[];
    clear($knots);

    //Knots
    $knots[0] = 0;
    $knots[1] = 0;
    $knots[2] = 0;
    for($i = 0; $i < size($inputPoints)-2;$i++){
        $knots[$i+3] = $i;
    }
    $knots[size($knots)] = $i-1;
    $knots[size($knots)] = $i-1;
    $knots[size($knots)] = $i-1;


    $sscString = "softSelect -ssc \"";
    float $x;
    float $lastX = -1.0;
    $maxval = $knots[size($knots)-1];
    for ($i = 0; $i <= 20; $i++) {
        $x = ($maxval/20.0)*$i;

        vector $fp = SSB.deBoor($x, $knots, $inputPoints);

        //Handle non-X monotone curves
        if($fp.x > $lastX){
            $lastX = $fp.x;
            $sscString+=$fp.y;
            $sscString+=",";
            $sscString+=$fp.x;
            $sscString+=",1,";
        }
    }

    $sscString = substring($sscString,1,size($sscString)-1); //Trim trailing comma
    $sscString += "\"";
    eval($sscString);
}

proc SSB.buildWindow(){
    columnLayout;
    $cv = `falloffCurve -h 300 -w 300 -cc "SSV.evalNurbs()"`;
};

proc SSB.testTiming(){
    timer -s;
    for ($i = 0; $i < 100; $i++) {
        evalNurbs();
    }
    print(`timer -e`);
}
if(`workspaceControl -exists "SSB"`){
    deleteUI "SSB";
}
workspaceControl -ui "SSB.buildWindow()" -li true "SSB";

}
